name: カバレッジコメント

on:
  pull_request:
    types: [opened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  coverage-comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    
    strategy:
      fail-fast: false
    
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4
      
      - name: PHPセットアップ
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, sqlite3, pdo_sqlite
          coverage: xdebug
          ini-values: memory_limit=4G, max_execution_time=600, opcache.memory_consumption=256, opcache.max_accelerated_files=20000
      
      - name: Node.jsセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Composer依存関係をキャッシュ
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      
      - name: PHP依存関係をインストール
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader
      
      - name: Node.js依存関係をインストール
        run: npm ci
      
      - name: 環境ファイルを作成
        run: |
          cp .env.ci .env
          php artisan key:generate --force
      
      - name: フロントエンドアセットをビルド
        run: npm run build
      
      - name: データベースを設定
        run: |
          php artisan config:cache
          php artisan migrate --force
      
      - name: カバレッジ付きテストを実行（CI最適化版）
        run: |
          echo "=== PHP設定確認 ==="
          php -v
          php -i | grep memory_limit
          
          echo "=== カバレッジ付きテスト実行 ==="
          php artisan test --coverage --coverage-clover=coverage-clover.xml --stop-on-failure
      
      - name: カバレッジサマリーを生成
        id: coverage
        run: |
          if [ -f coverage-clover.xml ]; then
            COVERAGE=$(php -r "
              \$xml = simplexml_load_file('coverage-clover.xml');
              \$metrics = \$xml->project->metrics;
              \$elements = (int)\$metrics['elements'];
              \$coveredelements = (int)\$metrics['coveredelements'];
              \$coverage = \$elements > 0 ? round((\$coveredelements / \$elements) * 100, 2) : 0;
              echo \$coverage;
            ")
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "カバレッジ: $COVERAGE%"
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
            echo "カバレッジファイルが見つかりません"
          fi
      
      - name: カバレッジレポートをアップロード
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage-html/
            coverage-clover.xml
          retention-days: 30
      
      - name: PRにカバレッジをコメント
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = '${{ steps.coverage.outputs.coverage }}';
            const coverageIcon = coverage >= 80 ? '🟢' : coverage >= 60 ? '🟡' : '🔴';
            const body = `## ${coverageIcon} テストカバレッジレポート
            
            **カバレッジ: ${coverage}%**
            
            ${coverage >= 80 ? '✅ 優秀なカバレッジです！' : 
              coverage >= 60 ? '⚠️  カバレッジの改善を検討してください' : 
              '❌ カバレッジが低いです。テストの追加をお勧めします'}
            
            📊 詳細なレポートは[Artifactsからダウンロード](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})できます。
            `;
            
            // 既存のコメントを探す
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('テストカバレッジレポート')
            );
            
            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }