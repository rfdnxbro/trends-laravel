name: 品質チェック

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 共通のビルドジョブ
  build:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4
      
      - name: PHPセットアップ
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, sqlite3, pdo_sqlite
          coverage: xdebug
      
      - name: Node.jsセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Composer依存関係をキャッシュ
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      
      - name: node_modulesをキャッシュ
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: PHP依存関係をインストール
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
      
      - name: Node.js依存関係をインストール
        run: npm ci
      
      - name: 環境ファイルを作成
        run: |
          cp .env.ci .env
          php artisan key:generate --force
      
      - name: フロントエンドアセットをビルド
        run: npm run build
      
      - name: ビルド成果物をアップロード
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            vendor/
            node_modules/
            public/build/
            bootstrap/cache/
            .env
            .env.ci
            storage/framework/cache/
          retention-days: 1

  # PHPテスト
  php-tests:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4
      
      - name: PHPセットアップ
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, sqlite3, pdo_sqlite
          coverage: xdebug
      
      - name: ビルド成果物をダウンロード
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: 実行権限を修正
        run: |
          chmod +x vendor/bin/*
      
      - name: 環境とデータベースを設定
        run: |
          # 環境変数を確実に設定
          export DB_CONNECTION=sqlite
          export DB_DATABASE=":memory:"
          
          # 設定のクリア
          php artisan config:clear
          
          # マイグレーションを実行
          php artisan migrate --force
      
      - name: PHPテストを実行
        run: php artisan test --stop-on-failure
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ":memory:"

  # コードスタイルチェック
  code-style:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4
      
      - name: PHPセットアップ
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo
      
      - name: ビルド成果物をダウンロード
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: 実行権限を修正
        run: |
          chmod +x vendor/bin/*
      
      - name: コードスタイルチェックを実行
        run: vendor/bin/pint --test

  # 静的解析
  static-analysis:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4
      
      - name: PHPセットアップ
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo
      
      - name: ビルド成果物をダウンロード
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: 実行権限を修正
        run: |
          chmod +x vendor/bin/*
      
      - name: 静的解析を実行
        run: vendor/bin/phpstan analyse --no-progress --memory-limit=1G

  # PHP循環的複雑度チェック
  php-complexity:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4
      
      - name: PHPセットアップ
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo
      
      - name: ビルド成果物をダウンロード
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: 実行権限を修正
        run: |
          chmod +x vendor/bin/*
      
      - name: PHP循環的複雑度チェックを実行
        run: |
          vendor/bin/phpmetrics --config=phpmetrics.json --report-html=phpmetrics-report app/
          echo "PHPMetrics report generated at phpmetrics-report/index.html"
      
      - name: PHPMetricsレポートをアップロード
        uses: actions/upload-artifact@v4
        with:
          name: phpmetrics-report
          path: phpmetrics-report/
          retention-days: 30

  # TypeScript品質チェック
  typescript-checks:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4
      
      - name: Node.jsセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: ビルド成果物をダウンロード
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: 実行権限を修正
        run: |
          chmod +x vendor/bin/*
      
      - name: Node.js依存関係をインストール
        run: npm ci
      
      - name: TypeScript循環的複雑度チェックを実行
        run: npx eslint 'resources/js/**/*.{ts,tsx}' --max-warnings 0

  # フロントエンドテスト
  frontend-tests:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4
      
      - name: Node.jsセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: ビルド成果物をダウンロード
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: 実行権限を修正
        run: |
          chmod +x vendor/bin/*
      
      - name: Node.js依存関係をインストール
        run: npm ci
      
      - name: フロントエンドテストを実行
        run: npm run test

  # カバレッジチェック（PR時のみ）
  coverage:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'pull_request' && !contains(github.event.head_commit.message, '[skip ci]') }}
    
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4
      
      - name: PHPセットアップ
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, sqlite3, pdo_sqlite
          coverage: xdebug
      
      - name: ビルド成果物をダウンロード
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: 実行権限を修正
        run: |
          chmod +x vendor/bin/*
      
      - name: 環境とデータベースを設定
        run: |
          # 環境変数を確実に設定
          export DB_CONNECTION=sqlite
          export DB_DATABASE=":memory:"
          
          # キャッシュをクリアして再構築
          php artisan config:clear
          php artisan cache:clear
          
          # マイグレーションを実行
          php artisan migrate --force
      
      - name: カバレッジ付きテストを実行
        run: php artisan test --coverage-html=coverage-html --coverage-clover=coverage-clover.xml --stop-on-failure
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ":memory:"
      
      - name: カバレッジサマリーを生成と95%閾値チェック
        id: coverage
        run: |
          if [ -f coverage-clover.xml ]; then
            COVERAGE=$(php -r "
              \$xml = simplexml_load_file('coverage-clover.xml');
              \$metrics = \$xml->project->metrics;
              \$elements = (int)\$metrics['elements'];
              \$coveredelements = (int)\$metrics['coveredelements'];
              \$coverage = \$elements > 0 ? round((\$coveredelements / \$elements) * 100, 2) : 0;
              echo \$coverage;
            ")
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "📈 現在のテストカバレッジ: $COVERAGE%"
            
            # 95%閾値チェック
            if (( $(echo "$COVERAGE < 95.0" | bc -l) )); then
              echo "❌ テストカバレッジが95%を下回っています: ${COVERAGE}%"
              echo "💡 カバレッジ向上のため、テスト実装をお願いします。"
              exit 1
            fi
            
            echo "✅ テストカバレッジチェック合格: ${COVERAGE}%"
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
            echo "❌ カバレッジファイルが見つかりません"
            exit 1
          fi
      
      - name: カバレッジレポートをアーティファクトにアップロード
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            coverage-html/
            coverage-clover.xml
          retention-days: 30
      
      - name: PRにカバレッジをコメント
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const coverage = '${{ steps.coverage.outputs.coverage }}' || '0';
            const coverageIcon = coverage >= 95 ? '🟢' : coverage >= 80 ? '🟡' : '🔴';
            const thresholdStatus = coverage >= 95 ? '✅ 95%閾値達成' : '❌ 95%閾値未達成';
            
            const body = `## ${coverageIcon} テストカバレッジレポート
            
            **カバレッジ: ${coverage}% | ${thresholdStatus}**
            
            ${coverage >= 95 ? '✅ 優秀なカバレッジです！95%閾値を達成しています。' : 
              coverage >= 80 ? '⚠️  95%閾値未達成です。カバレッジの改善をお願いします。' : 
              '❌ カバレッジが大幅に不足しています。テストの追加が必要です。'}
            
            📊 詳細なレポートは[Artifactsからダウンロード](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})できます。
            
            ${coverage < 95 ? `
            ### 💡 テスト改善のヒント
            詳細なカバレッジレポートをダウンロードして、未カバー箇所を確認してください。
            ` : ''}
            `;
            
            // 既存のコメントを探す
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('テストカバレッジレポート')
            );
            
            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # 全てのチェックが成功したことを確認
  all-checks:
    runs-on: ubuntu-latest
    needs: [php-tests, code-style, static-analysis, php-complexity, typescript-checks, frontend-tests]
    if: ${{ always() && !contains(github.event.head_commit.message, '[skip ci]') }}
    
    steps:
      - name: 全てのチェックが成功したか確認
        run: |
          if [[ "${{ needs.php-tests.result }}" != "success" || \
                "${{ needs.code-style.result }}" != "success" || \
                "${{ needs.static-analysis.result }}" != "success" || \
                "${{ needs.php-complexity.result }}" != "success" || \
                "${{ needs.typescript-checks.result }}" != "success" || \
                "${{ needs.frontend-tests.result }}" != "success" ]]; then
            echo "Some checks failed"
            exit 1
          fi
          echo "All checks passed successfully!"